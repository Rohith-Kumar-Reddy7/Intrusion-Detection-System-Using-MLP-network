{"cells":[{"cell_type":"markdown","metadata":{"id":"xz8TMZGSqexP"},"source":["\n","\n","Mounting google drive"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":55044,"status":"ok","timestamp":1682321332736,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"},"user_tz":-330},"id":"jESUGTkdjF75","outputId":"1dd3a150-e9aa-41d9-d49f-f31c24e962c3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pyswarms in /usr/local/lib/python3.9/dist-packages (1.3.0)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.9/dist-packages (from pyswarms) (6.0)\n","Requirement already satisfied: attrs in /usr/local/lib/python3.9/dist-packages (from pyswarms) (23.1.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.9/dist-packages (from pyswarms) (4.65.0)\n","Requirement already satisfied: matplotlib>=1.3.1 in /usr/local/lib/python3.9/dist-packages (from pyswarms) (3.7.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (from pyswarms) (1.23.5)\n","Requirement already satisfied: future in /usr/local/lib/python3.9/dist-packages (from pyswarms) (0.18.3)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.9/dist-packages (from pyswarms) (1.10.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=1.3.1->pyswarms) (4.39.3)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=1.3.1->pyswarms) (0.11.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=1.3.1->pyswarms) (1.4.4)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=1.3.1->pyswarms) (2.8.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=1.3.1->pyswarms) (23.1)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=1.3.1->pyswarms) (3.0.9)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=1.3.1->pyswarms) (1.0.7)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=1.3.1->pyswarms) (8.4.0)\n","Requirement already satisfied: importlib-resources>=3.2.0 in /usr/local/lib/python3.9/dist-packages (from matplotlib>=1.3.1->pyswarms) (5.12.0)\n","Requirement already satisfied: zipp>=3.1.0 in /usr/local/lib/python3.9/dist-packages (from importlib-resources>=3.2.0->matplotlib>=1.3.1->pyswarms) (3.15.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/dist-packages (from python-dateutil>=2.7->matplotlib>=1.3.1->pyswarms) (1.16.0)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.9/dist-packages (2.12.0)\n","Requirement already satisfied: tensorflow-estimator<2.13,>=2.12.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (2.12.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.9/dist-packages (from tensorflow) (23.1)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (1.14.1)\n","Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (0.4.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: keras<2.13,>=2.12.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (2.12.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: numpy<1.24,>=1.22 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (1.23.5)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (1.53.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (16.0.0)\n","Requirement already satisfied: jax>=0.3.15 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (0.3.25)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (3.8.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.9/dist-packages (from tensorflow) (67.6.1)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: flatbuffers>=2.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (23.3.3)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (0.32.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (4.5.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (2.2.0)\n","Requirement already satisfied: tensorboard<2.13,>=2.12 in /usr/local/lib/python3.9/dist-packages (from tensorflow) (2.12.2)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.9/dist-packages (from astunparse>=1.6.0->tensorflow) (0.40.0)\n","Requirement already satisfied: scipy>=1.5 in /usr/local/lib/python3.9/dist-packages (from jax>=0.3.15->tensorflow) (1.10.1)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (2.17.3)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (3.4.3)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (2.27.1)\n","Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (1.0.0)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (0.7.0)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (1.8.1)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.9/dist-packages (from tensorboard<2.13,>=2.12->tensorflow) (2.2.3)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.9/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow) (0.2.8)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.9/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow) (4.9)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.9/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow) (5.3.0)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.9/dist-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.9/dist-packages (from markdown>=2.6.8->tensorboard<2.13,>=2.12->tensorflow) (6.4.1)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.9/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow) (2022.12.7)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.9/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow) (2.0.12)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.9/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow) (1.26.15)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.9/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow) (3.4)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.9/dist-packages (from werkzeug>=1.0.1->tensorboard<2.13,>=2.12->tensorflow) (2.1.2)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.9/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.13,>=2.12->tensorflow) (3.15.0)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.9/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.9/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow) (3.2.2)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: keras in /usr/local/lib/python3.9/dist-packages (2.12.0)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: numpy in /usr/local/lib/python3.9/dist-packages (1.23.5)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pandas in /usr/local/lib/python3.9/dist-packages (1.5.3)\n","Requirement already satisfied: numpy>=1.20.3 in /usr/local/lib/python3.9/dist-packages (from pandas) (1.23.5)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.9/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.9/dist-packages (from pandas) (2022.7.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.9/dist-packages (from python-dateutil>=2.8.1->pandas) (1.16.0)\n"]}],"source":["!pip install pyswarms\n","!pip install tensorflow\n","!pip install keras\n","!pip install numpy\n","!pip install pandas\n","\n","import pandas as pd\n","import numpy as np\n","import pyswarms as ps\n","import seaborn as sns\n","import os\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","from tensorflow import keras\n","from sklearn.metrics import classification_report, confusion_matrix\n","from sklearn.model_selection import cross_val_score\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.ensemble import RandomForestClassifier\n","from google.colab import drive\n","\n","'''remove these lines'''\n","import pyswarms as ps\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score\n","from sklearn.ensemble import RandomForestClassifier\n","\n","pd.set_option('display.max_columns', None)\n","pd.set_option('display.max_rows', None)\n","\n","\n","# increase maximum number of displayed rows and columns\n","pd.options.display.max_rows = 1000\n","pd.options.display.max_columns = 1000\n"]},{"cell_type":"markdown","metadata":{"id":"Zr7YmZbDjLNE"},"source":["Mounting the drive folder containing the required datasets"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3960,"status":"ok","timestamp":1682321336683,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"},"user_tz":-330},"id":"eC90kEqpnbX0","outputId":"61815538-333e-4e3a-900a-cd805b91796d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"14BSajr3jZlt"},"source":["The dataset folder consists of mulitiple CSV files which are having same structure,the following code will read each CSV file and concatenates them into a single dataframe"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":54487,"status":"ok","timestamp":1682321391162,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"},"user_tz":-330},"id":"vbaw9RA8qYh1","outputId":"6b019792-a844-4fbf-90e9-650e18de6c7f"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-3-42aa0cd32de2>:12: DtypeWarning: Columns (7,9) have mixed types. Specify dtype option on import or set low_memory=False.\n","  data=pd.read_csv(filepath)\n","<ipython-input-3-42aa0cd32de2>:12: DtypeWarning: Columns (7,9) have mixed types. Specify dtype option on import or set low_memory=False.\n","  data=pd.read_csv(filepath)\n","<ipython-input-3-42aa0cd32de2>:12: DtypeWarning: Columns (7,9) have mixed types. Specify dtype option on import or set low_memory=False.\n","  data=pd.read_csv(filepath)\n","<ipython-input-3-42aa0cd32de2>:12: DtypeWarning: Columns (7,9) have mixed types. Specify dtype option on import or set low_memory=False.\n","  data=pd.read_csv(filepath)\n"]}],"source":["Bot_IOT_path='drive/My Drive/Major project/Datasets/BoT-IoT/Training and testing sets/All features/'\n","\n","\n","\n","\n","df=pd.DataFrame()\n","count=0;\n","for filename in os.listdir(Bot_IOT_path):\n","    if (filename.endswith('.csv')):\n","        # Read in the CSV file\n","        filepath = os.path.join(Bot_IOT_path, filename)\n","        data=pd.read_csv(filepath)\n","        df=pd.concat([df,data])\n","        count=count+1\n","    else:\n","      break;\n","\n","#dropping the first column 'pkSeqID' because it does not have any useful information\n","df = df.drop('pkSeqID', axis=1)\n"]},{"cell_type":"markdown","metadata":{"id":"blmdB9xOjpjr"},"source":["Preprocessing the collected data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":194},"executionInfo":{"elapsed":22902,"status":"ok","timestamp":1682321414036,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"},"user_tz":-330},"id":"_APVQBpJlV6m","outputId":"66f8496e-0eab-4278-d966-674cf254c8d4"},"outputs":[{"output_type":"stream","name":"stdout","text":["(3668522, 45)\n"]},{"output_type":"execute_result","data":{"text/plain":["          stime flgs  flgs_number proto  proto_number            saddr  sport  \\\n","0  1.528089e+09    e            1   tcp             1  192.168.100.147  49960   \n","1  1.528089e+09    e            1   arp             2    192.168.100.7     -1   \n","\n","             daddr dport  pkts  bytes state  state_number         ltime  seq  \\\n","0    192.168.100.7    80     8   1980   RST             1  1.528089e+09    9   \n","1  192.168.100.147    -1     2    120   CON             2  1.528089e+09   10   \n","\n","        dur      mean    stddev       sum       min       max  spkts  dpkts  \\\n","0  7.056393  0.068909  0.068909  0.137818  0.000000  0.137818      5      3   \n","1  0.000131  0.000131  0.000000  0.000131  0.000131  0.000131      1      1   \n","\n","   sbytes  dbytes         rate     srate      drate  TnBPSrcIP  TnBPDstIP  \\\n","0     650    1330     0.992008  0.566862  14.511893     157426     201841   \n","1      60      60  7633.588379  0.000000   0.000000        360        120   \n","\n","   TnP_PSrcIP  TnP_PDstIP  TnP_PerProto  TnP_Per_Dport  AR_P_Proto_P_SrcIP  \\\n","0         602         770           772            772            1.142970   \n","1           6           2             8              8            0.003857   \n","\n","   AR_P_Proto_P_DstIP  N_IN_Conn_P_DstIP  N_IN_Conn_P_SrcIP  \\\n","0             1.12704                 96                 75   \n","1         15267.20000                  1                  2   \n","\n","   AR_P_Proto_P_Sport  AR_P_Proto_P_Dport  Pkts_P_State_P_Protocol_P_DestIP  \\\n","0            1.133720            1.129970                               770   \n","1            0.005142            0.005142                                 2   \n","\n","   Pkts_P_State_P_Protocol_P_SrcIP  attack category subcategory  \n","0                              602       1      DoS        HTTP  \n","1                                6       1      DoS        HTTP  "],"text/html":["\n","  <div id=\"df-00ea0a98-898e-4109-bef7-227703971cc1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>stime</th>\n","      <th>flgs</th>\n","      <th>flgs_number</th>\n","      <th>proto</th>\n","      <th>proto_number</th>\n","      <th>saddr</th>\n","      <th>sport</th>\n","      <th>daddr</th>\n","      <th>dport</th>\n","      <th>pkts</th>\n","      <th>bytes</th>\n","      <th>state</th>\n","      <th>state_number</th>\n","      <th>ltime</th>\n","      <th>seq</th>\n","      <th>dur</th>\n","      <th>mean</th>\n","      <th>stddev</th>\n","      <th>sum</th>\n","      <th>min</th>\n","      <th>max</th>\n","      <th>spkts</th>\n","      <th>dpkts</th>\n","      <th>sbytes</th>\n","      <th>dbytes</th>\n","      <th>rate</th>\n","      <th>srate</th>\n","      <th>drate</th>\n","      <th>TnBPSrcIP</th>\n","      <th>TnBPDstIP</th>\n","      <th>TnP_PSrcIP</th>\n","      <th>TnP_PDstIP</th>\n","      <th>TnP_PerProto</th>\n","      <th>TnP_Per_Dport</th>\n","      <th>AR_P_Proto_P_SrcIP</th>\n","      <th>AR_P_Proto_P_DstIP</th>\n","      <th>N_IN_Conn_P_DstIP</th>\n","      <th>N_IN_Conn_P_SrcIP</th>\n","      <th>AR_P_Proto_P_Sport</th>\n","      <th>AR_P_Proto_P_Dport</th>\n","      <th>Pkts_P_State_P_Protocol_P_DestIP</th>\n","      <th>Pkts_P_State_P_Protocol_P_SrcIP</th>\n","      <th>attack</th>\n","      <th>category</th>\n","      <th>subcategory</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.528089e+09</td>\n","      <td>e</td>\n","      <td>1</td>\n","      <td>tcp</td>\n","      <td>1</td>\n","      <td>192.168.100.147</td>\n","      <td>49960</td>\n","      <td>192.168.100.7</td>\n","      <td>80</td>\n","      <td>8</td>\n","      <td>1980</td>\n","      <td>RST</td>\n","      <td>1</td>\n","      <td>1.528089e+09</td>\n","      <td>9</td>\n","      <td>7.056393</td>\n","      <td>0.068909</td>\n","      <td>0.068909</td>\n","      <td>0.137818</td>\n","      <td>0.000000</td>\n","      <td>0.137818</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>650</td>\n","      <td>1330</td>\n","      <td>0.992008</td>\n","      <td>0.566862</td>\n","      <td>14.511893</td>\n","      <td>157426</td>\n","      <td>201841</td>\n","      <td>602</td>\n","      <td>770</td>\n","      <td>772</td>\n","      <td>772</td>\n","      <td>1.142970</td>\n","      <td>1.12704</td>\n","      <td>96</td>\n","      <td>75</td>\n","      <td>1.133720</td>\n","      <td>1.129970</td>\n","      <td>770</td>\n","      <td>602</td>\n","      <td>1</td>\n","      <td>DoS</td>\n","      <td>HTTP</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.528089e+09</td>\n","      <td>e</td>\n","      <td>1</td>\n","      <td>arp</td>\n","      <td>2</td>\n","      <td>192.168.100.7</td>\n","      <td>-1</td>\n","      <td>192.168.100.147</td>\n","      <td>-1</td>\n","      <td>2</td>\n","      <td>120</td>\n","      <td>CON</td>\n","      <td>2</td>\n","      <td>1.528089e+09</td>\n","      <td>10</td>\n","      <td>0.000131</td>\n","      <td>0.000131</td>\n","      <td>0.000000</td>\n","      <td>0.000131</td>\n","      <td>0.000131</td>\n","      <td>0.000131</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>60</td>\n","      <td>60</td>\n","      <td>7633.588379</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>360</td>\n","      <td>120</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>0.003857</td>\n","      <td>15267.20000</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0.005142</td>\n","      <td>0.005142</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>DoS</td>\n","      <td>HTTP</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00ea0a98-898e-4109-bef7-227703971cc1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-00ea0a98-898e-4109-bef7-227703971cc1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-00ea0a98-898e-4109-bef7-227703971cc1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}],"source":["#dropping the duplicates\n","df.drop_duplicates(inplace=True)\n","\n","\n","print(df.shape)\n","df.head(2)\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"xIEFcGw51Ba3"},"source":["proto\n","state\n","flgs\n","the above features are the having categorical data\n","\n","Viewing unique values that are present in the fields \"category\" and \"subcategory\" so that we can Encode numerical values to those fields.Here we also viewed unique <category,subcategory> fields."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":760},"executionInfo":{"elapsed":2133,"status":"ok","timestamp":1682321416137,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"},"user_tz":-330},"id":"0hVF5Fu91OIr","outputId":"50669ac1-f503-4319-b000-cc3fade5d8ff"},"outputs":[{"output_type":"stream","name":"stdout","text":["unique protocol values:\n","['tcp' 'arp' 'udp' 'icmp' 'ipv6-icmp']\n","\n","\n","\n","unique state values:\n","['RST' 'CON' 'REQ' 'INT' 'URP' 'ACC' 'FIN' 'NRS' 'ECO' 'TST' 'MAS']\n","\n","\n","\n","unique flgs values:\n","['e' 'e s' 'e d' 'e *' 'e g' 'eU' 'e &' 'e   t' 'e  D']\n","\n","\n","\n","unique attack values:\n","[1 0]\n","\n","\n","\n","unique subcategory values:\n","['HTTP' 'TCP' 'UDP' 'Normal' 'OS_Fingerprint' 'Service_Scan'\n"," 'Data_Exfiltration' 'Keylogging']\n","\n","\n","\n","unique category values:\n","['DoS' 'DDoS' 'Normal' 'Reconnaissance' 'Theft']\n","\n","\n","\n","(3668522, 43)\n"]},{"output_type":"execute_result","data":{"text/plain":["          stime flgs  flgs_number proto  proto_number  sport dport  pkts  \\\n","0  1.528089e+09    e            1   tcp             1  49960    80     8   \n","1  1.528089e+09    e            1   arp             2     -1    -1     2   \n","\n","   bytes state  state_number         ltime  seq       dur      mean    stddev  \\\n","0   1980   RST             1  1.528089e+09    9  7.056393  0.068909  0.068909   \n","1    120   CON             2  1.528089e+09   10  0.000131  0.000131  0.000000   \n","\n","        sum       min       max  spkts  dpkts  sbytes  dbytes         rate  \\\n","0  0.137818  0.000000  0.137818      5      3     650    1330     0.992008   \n","1  0.000131  0.000131  0.000131      1      1      60      60  7633.588379   \n","\n","      srate      drate  TnBPSrcIP  TnBPDstIP  TnP_PSrcIP  TnP_PDstIP  \\\n","0  0.566862  14.511893     157426     201841         602         770   \n","1  0.000000   0.000000        360        120           6           2   \n","\n","   TnP_PerProto  TnP_Per_Dport  AR_P_Proto_P_SrcIP  AR_P_Proto_P_DstIP  \\\n","0           772            772            1.142970             1.12704   \n","1             8              8            0.003857         15267.20000   \n","\n","   N_IN_Conn_P_DstIP  N_IN_Conn_P_SrcIP  AR_P_Proto_P_Sport  \\\n","0                 96                 75            1.133720   \n","1                  1                  2            0.005142   \n","\n","   AR_P_Proto_P_Dport  Pkts_P_State_P_Protocol_P_DestIP  \\\n","0            1.129970                               770   \n","1            0.005142                                 2   \n","\n","   Pkts_P_State_P_Protocol_P_SrcIP  attack category subcategory  \n","0                              602       1      DoS        HTTP  \n","1                                6       1      DoS        HTTP  "],"text/html":["\n","  <div id=\"df-55f44426-2be5-476c-b1ab-334dd7e3c06f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>stime</th>\n","      <th>flgs</th>\n","      <th>flgs_number</th>\n","      <th>proto</th>\n","      <th>proto_number</th>\n","      <th>sport</th>\n","      <th>dport</th>\n","      <th>pkts</th>\n","      <th>bytes</th>\n","      <th>state</th>\n","      <th>state_number</th>\n","      <th>ltime</th>\n","      <th>seq</th>\n","      <th>dur</th>\n","      <th>mean</th>\n","      <th>stddev</th>\n","      <th>sum</th>\n","      <th>min</th>\n","      <th>max</th>\n","      <th>spkts</th>\n","      <th>dpkts</th>\n","      <th>sbytes</th>\n","      <th>dbytes</th>\n","      <th>rate</th>\n","      <th>srate</th>\n","      <th>drate</th>\n","      <th>TnBPSrcIP</th>\n","      <th>TnBPDstIP</th>\n","      <th>TnP_PSrcIP</th>\n","      <th>TnP_PDstIP</th>\n","      <th>TnP_PerProto</th>\n","      <th>TnP_Per_Dport</th>\n","      <th>AR_P_Proto_P_SrcIP</th>\n","      <th>AR_P_Proto_P_DstIP</th>\n","      <th>N_IN_Conn_P_DstIP</th>\n","      <th>N_IN_Conn_P_SrcIP</th>\n","      <th>AR_P_Proto_P_Sport</th>\n","      <th>AR_P_Proto_P_Dport</th>\n","      <th>Pkts_P_State_P_Protocol_P_DestIP</th>\n","      <th>Pkts_P_State_P_Protocol_P_SrcIP</th>\n","      <th>attack</th>\n","      <th>category</th>\n","      <th>subcategory</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.528089e+09</td>\n","      <td>e</td>\n","      <td>1</td>\n","      <td>tcp</td>\n","      <td>1</td>\n","      <td>49960</td>\n","      <td>80</td>\n","      <td>8</td>\n","      <td>1980</td>\n","      <td>RST</td>\n","      <td>1</td>\n","      <td>1.528089e+09</td>\n","      <td>9</td>\n","      <td>7.056393</td>\n","      <td>0.068909</td>\n","      <td>0.068909</td>\n","      <td>0.137818</td>\n","      <td>0.000000</td>\n","      <td>0.137818</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>650</td>\n","      <td>1330</td>\n","      <td>0.992008</td>\n","      <td>0.566862</td>\n","      <td>14.511893</td>\n","      <td>157426</td>\n","      <td>201841</td>\n","      <td>602</td>\n","      <td>770</td>\n","      <td>772</td>\n","      <td>772</td>\n","      <td>1.142970</td>\n","      <td>1.12704</td>\n","      <td>96</td>\n","      <td>75</td>\n","      <td>1.133720</td>\n","      <td>1.129970</td>\n","      <td>770</td>\n","      <td>602</td>\n","      <td>1</td>\n","      <td>DoS</td>\n","      <td>HTTP</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.528089e+09</td>\n","      <td>e</td>\n","      <td>1</td>\n","      <td>arp</td>\n","      <td>2</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>2</td>\n","      <td>120</td>\n","      <td>CON</td>\n","      <td>2</td>\n","      <td>1.528089e+09</td>\n","      <td>10</td>\n","      <td>0.000131</td>\n","      <td>0.000131</td>\n","      <td>0.000000</td>\n","      <td>0.000131</td>\n","      <td>0.000131</td>\n","      <td>0.000131</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>60</td>\n","      <td>60</td>\n","      <td>7633.588379</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>360</td>\n","      <td>120</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>0.003857</td>\n","      <td>15267.20000</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0.005142</td>\n","      <td>0.005142</td>\n","      <td>2</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>DoS</td>\n","      <td>HTTP</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55f44426-2be5-476c-b1ab-334dd7e3c06f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-55f44426-2be5-476c-b1ab-334dd7e3c06f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-55f44426-2be5-476c-b1ab-334dd7e3c06f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}],"source":["\n","\n","unique_proto = df['proto'].unique()\n","print(\"unique protocol values:\")\n","print(unique_proto)\n","print(\"\\n\\n\")\n","\n","\n","\n","unique_state = df['state'].unique()\n","print(\"unique state values:\")\n","print(unique_state)\n","print(\"\\n\\n\")\n","\n","unique_flgs = df['flgs'].unique()\n","print(\"unique flgs values:\")\n","print(unique_flgs)\n","print(\"\\n\\n\")\n","\n","unique_attack = df['attack'].unique()\n","print(\"unique attack values:\")\n","print(unique_attack)\n","print(\"\\n\\n\")\n","\n","\n","unique_subcategories = df['subcategory'].unique()\n","print(\"unique subcategory values:\")\n","print(unique_subcategories)\n","print(\"\\n\\n\")\n","\n","unique_categories = df['category'].unique()\n","print(\"unique category values:\")\n","print(unique_categories)\n","print(\"\\n\\n\")\n","\n","df=df.drop('saddr',axis=1)\n","df=df.drop('daddr',axis=1)\n","\n","\n","print(df.shape)\n","\n","df.head(2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1682321416138,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"},"user_tz":-330},"id":"5ax09ySTzt3L","outputId":"dd3bd5e7-4a31-4e48-a377-cf29e5a41b6e"},"outputs":[{"output_type":"stream","name":"stdout","text":["The dataframe has non-numeric values in columns: flgs, proto, sport, dport, state, category, subcategory\n"]}],"source":["\n","# check if the dataframe has non-numeric values\n","non_numeric_cols = df.select_dtypes(exclude=['number']).columns\n","if len(non_numeric_cols) > 0:\n","    print(f\"The dataframe has nonx-numeric values in columns: {', '.join(non_numeric_cols)}\")\n","else:\n","    print(\"The dataframe does not have non-numeric values\")"]},{"cell_type":"markdown","metadata":{"id":"hdnilMJM9pkS"},"source":[" we have categorical features like proto,state in order to convert those categorical values to numerical values one-hot encodingis used.This is necessary because machine learning algorithms generally work with numerical data.The following code performs one-hot encoding for features = ['proto', 'flag' 'state']\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15593,"status":"ok","timestamp":1682321431724,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"},"user_tz":-330},"id":"8XP3w-xP-NQV","outputId":"703f639f-22ed-48be-ca08-6ceecb6a15b1"},"outputs":[{"output_type":"stream","name":"stdout","text":["(3668522, 65)\n","The dataframe does not have non-numeric values\n"]}],"source":["from sklearn.preprocessing import LabelEncoder\n","\n","# perform one-hot encoding on proto, flgs, state, category, and subcategory\n","ohe_cols = ['proto', 'flgs', 'state']\n","df = pd.get_dummies(df, columns=ohe_cols)\n","\n","le = LabelEncoder()\n","df['category'] = le.fit_transform(df['category'])\n","df['subcategory'] = le.fit_transform(df['subcategory'])\n","\n","\n","print(df.shape)\n","df.head(2)\n","\n","\n","# Drop the rows with non-numerical values in 'sport' or 'dport'\n","df = df[pd.to_numeric(df['sport'], errors='coerce').notnull() & pd.to_numeric(df['dport'], errors='coerce').notnull()]\n","\n","# Convert the remaining values in 'sport' and 'dport' to numeric values\n","df['sport'] = pd.to_numeric(df['sport'], errors='coerce')\n","df['dport'] = pd.to_numeric(df['dport'], errors='coerce')\n","\n","df=df.drop('subcategory',axis=1)\n","df=df.drop('attack',axis=1)\n","\n","# check if the dataframe has non-numeric values\n","non_numeric_cols = df.select_dtypes(exclude=['number']).columns\n","if len(non_numeric_cols) > 0:\n","    print(f\"The dataframe has non-numeric values in columns: {', '.join(non_numeric_cols)}\")\n","else:\n","    print(\"The dataframe does not have non-numeric values\")\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2007,"status":"ok","timestamp":1682321433704,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"},"user_tz":-330},"id":"4sVEx5KA6JWf","outputId":"6ef0e977-9247-4539-bea2-c42735c05858"},"outputs":[{"output_type":"stream","name":"stdout","text":["unique category values:\n","[1 0 3 2 4]\n","\n","\n","\n"]}],"source":["df.head(2)\n","df=df.sample(n=1000000,random_state=42)\n","unique_categories = df['category'].unique()\n","print(\"unique category values:\")\n","print(unique_categories)\n","print(\"\\n\\n\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9lajhlzvqUK8","executionInfo":{"status":"ok","timestamp":1682321531920,"user_tz":-330,"elapsed":98222,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"}},"outputId":"e6531f03-c6bc-45c9-ef0b-ed64ccfe55e5"},"outputs":[{"output_type":"stream","name":"stderr","text":["2023-04-24 07:30:32,608 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'max_velocity': 4, 'min_velocity': -4, 'k': 5, 'p': 2}\n"]},{"output_type":"stream","name":"stdout","text":["(10000, 63)\n"]},{"output_type":"stream","name":"stderr","text":["pyswarms.discrete.binary: 100%|██████████|100/100, best_cost=-1\n","2023-04-24 07:32:10,953 - pyswarms.discrete.binary - INFO - Optimization finished | best cost: -1.0, best pos: [0 1 1 0 0 1 1 0 1 0 1 1 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 0 0 1 1 1 0 0 1 0 0\n"," 1 1 0 1 0 0 0 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1]\n"]},{"output_type":"stream","name":"stdout","text":["flgs_number\n","proto_number\n","pkts\n","bytes\n","ltime\n","dur\n","mean\n","stddev\n","sum\n","min\n","max\n","sbytes\n","rate\n","drate\n","TnBPSrcIP\n","TnBPDstIP\n","AR_P_Proto_P_SrcIP\n","AR_P_Proto_P_DstIP\n","N_IN_Conn_P_DstIP\n","AR_P_Proto_P_Dport\n","proto_arp\n","proto_icmp\n","proto_tcp\n","flgs_e  D\n","flgs_e &\n","flgs_e *\n","state_FIN\n","state_INT\n","state_MAS\n","state_NRS\n","state_REQ\n","state_RST\n","state_URP\n","(1000000, 34)\n"]}],"source":["sample_df=df.sample(n=10000,random_state=42);\n","\n","print(sample_df.shape)\n","\n","# Separate target variable from features\n","X = sample_df.drop('category', axis=1)\n","y = sample_df['category']\n","\n","\n","# Split dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n","\n","# Define the fitness function to evaluate candidate feature subsets\n","def fitness_function(position, X_train, X_test, y_train, y_test):\n","    selected_features_idx = np.where(position == 1)[0]\n","    selected_features = X_train.columns[selected_features_idx]\n","    clf = RandomForestClassifier(n_estimators=100, random_state=42)\n","    clf.fit(X_train[selected_features], y_train)\n","    y_pred = clf.predict(X_test[selected_features])\n","    return -accuracy_score(y_test, y_pred)\n","\n","# Define the PSO optimizer\n","options = {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'max_velocity': 4, 'min_velocity': -4, 'k': 5, 'p': 2}\n","dimensions = X_train.shape[1]\n","optimizer = ps.discrete.BinaryPSO(n_particles=10, dimensions=dimensions, options=options)\n","\n","# Run the optimizer to obtain the optimal feature subset\n","cost, pos = optimizer.optimize(fitness_function, iters=100, X_train=X_train, X_test=X_test, y_train=y_train, y_test=y_test)\n","\n","# Print the selected feature subset and its corresponding accuracy score\n","'''selected_features = X_train.columns[pos[0].astype(bool)]\n","print(\"count of the number of features\",len(selected_features));'''\n","\n","# Get the names of the selected features\n","selected_feature_names = X_train.columns[pos == 1]\n","\n","for feature_name in selected_feature_names:\n","    print(feature_name)\n","\n","'''clf = RandomForestClassifier(n_estimators=100, random_state=42)\n","clf.fit(X_train[selected_features], y_train)\n","y_pred = clf.predict(X_test[selected_features])\n","accuracy = accuracy_score(y_test, y_pred)\n","print('Selected features:', selected_features)\n","print('Accuracy:', accuracy)'''\n","\n","sl=list(selected_feature_names)\n","sl.append('category')\n","# Create a new dataframe with only the selected feature columns\n","df = df.loc[:, sl]\n","\n","print(df.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KoYXOC0fkwvQ","executionInfo":{"status":"ok","timestamp":1682321537653,"user_tz":-330,"elapsed":562,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"}},"outputId":"99ce10e5-ca4b-47af-cacb-867ba6b33e53"},"outputs":[{"output_type":"stream","name":"stdout","text":["unique category values:\n","[1 0 3 2]\n","\n","\n","\n"]}],"source":["df.head(1)\n","df=df.sample(n=10000,random_state=42)\n","unique_categories = df['category'].unique()\n","print(\"unique category values:\")\n","print(unique_categories)\n","print(\"\\n\\n\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":59426,"status":"ok","timestamp":1682321822715,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"},"user_tz":-330},"id":"YqFF9uLbyBaN","outputId":"660f79ae-67ea-4639-e14c-4433b53935e6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/250\n","10/10 [==============================] - 4s 92ms/step - loss: 9.5848 - accuracy: 0.3684 - val_loss: 8.7659 - val_accuracy: 0.5564\n","Epoch 2/250\n","10/10 [==============================] - 0s 31ms/step - loss: 8.5009 - accuracy: 0.4788 - val_loss: 7.8126 - val_accuracy: 0.6968\n","Epoch 3/250\n","10/10 [==============================] - 0s 27ms/step - loss: 7.5821 - accuracy: 0.5254 - val_loss: 6.9729 - val_accuracy: 0.7778\n","Epoch 4/250\n","10/10 [==============================] - 0s 22ms/step - loss: 6.7487 - accuracy: 0.5790 - val_loss: 6.2287 - val_accuracy: 0.7918\n","Epoch 5/250\n","10/10 [==============================] - 0s 39ms/step - loss: 6.0415 - accuracy: 0.6008 - val_loss: 5.5666 - val_accuracy: 0.8096\n","Epoch 6/250\n","10/10 [==============================] - 0s 38ms/step - loss: 5.4167 - accuracy: 0.6034 - val_loss: 4.9771 - val_accuracy: 0.8220\n","Epoch 7/250\n","10/10 [==============================] - 0s 32ms/step - loss: 4.8372 - accuracy: 0.6382 - val_loss: 4.4502 - val_accuracy: 0.8472\n","Epoch 8/250\n","10/10 [==============================] - 0s 26ms/step - loss: 4.3438 - accuracy: 0.6452 - val_loss: 3.9795 - val_accuracy: 0.8490\n","Epoch 9/250\n","10/10 [==============================] - 0s 22ms/step - loss: 3.8952 - accuracy: 0.6612 - val_loss: 3.5593 - val_accuracy: 0.8520\n","Epoch 10/250\n","10/10 [==============================] - 0s 23ms/step - loss: 3.4856 - accuracy: 0.6968 - val_loss: 3.1850 - val_accuracy: 0.8538\n","Epoch 11/250\n","10/10 [==============================] - 0s 24ms/step - loss: 3.1242 - accuracy: 0.7056 - val_loss: 2.8527 - val_accuracy: 0.8684\n","Epoch 12/250\n","10/10 [==============================] - 0s 24ms/step - loss: 2.8132 - accuracy: 0.7178 - val_loss: 2.5591 - val_accuracy: 0.8678\n","Epoch 13/250\n","10/10 [==============================] - 0s 24ms/step - loss: 2.5274 - accuracy: 0.7454 - val_loss: 2.2978 - val_accuracy: 0.8818\n","Epoch 14/250\n","10/10 [==============================] - 0s 30ms/step - loss: 2.2827 - accuracy: 0.7518 - val_loss: 2.0678 - val_accuracy: 0.8820\n","Epoch 15/250\n","10/10 [==============================] - 0s 20ms/step - loss: 2.0614 - accuracy: 0.7710 - val_loss: 1.8656 - val_accuracy: 0.8814\n","Epoch 16/250\n","10/10 [==============================] - 0s 21ms/step - loss: 1.8703 - accuracy: 0.7816 - val_loss: 1.6886 - val_accuracy: 0.8802\n","Epoch 17/250\n","10/10 [==============================] - 0s 21ms/step - loss: 1.6957 - accuracy: 0.7888 - val_loss: 1.5341 - val_accuracy: 0.8798\n","Epoch 18/250\n","10/10 [==============================] - 0s 20ms/step - loss: 1.5573 - accuracy: 0.7878 - val_loss: 1.3991 - val_accuracy: 0.8788\n","Epoch 19/250\n","10/10 [==============================] - 0s 19ms/step - loss: 1.4252 - accuracy: 0.7994 - val_loss: 1.2816 - val_accuracy: 0.8780\n","Epoch 20/250\n","10/10 [==============================] - 0s 18ms/step - loss: 1.3082 - accuracy: 0.8046 - val_loss: 1.1792 - val_accuracy: 0.8774\n","Epoch 21/250\n","10/10 [==============================] - 0s 14ms/step - loss: 1.2143 - accuracy: 0.8034 - val_loss: 1.0900 - val_accuracy: 0.8780\n","Epoch 22/250\n","10/10 [==============================] - 0s 20ms/step - loss: 1.1316 - accuracy: 0.8114 - val_loss: 1.0117 - val_accuracy: 0.8782\n","Epoch 23/250\n","10/10 [==============================] - 0s 22ms/step - loss: 1.0571 - accuracy: 0.8202 - val_loss: 0.9444 - val_accuracy: 0.8780\n","Epoch 24/250\n","10/10 [==============================] - 0s 30ms/step - loss: 0.9883 - accuracy: 0.8290 - val_loss: 0.8858 - val_accuracy: 0.8778\n","Epoch 25/250\n","10/10 [==============================] - 0s 27ms/step - loss: 0.9356 - accuracy: 0.8234 - val_loss: 0.8344 - val_accuracy: 0.8850\n","Epoch 26/250\n","10/10 [==============================] - 0s 50ms/step - loss: 0.8862 - accuracy: 0.8268 - val_loss: 0.7902 - val_accuracy: 0.8824\n","Epoch 27/250\n","10/10 [==============================] - 0s 36ms/step - loss: 0.8496 - accuracy: 0.8268 - val_loss: 0.7526 - val_accuracy: 0.8880\n","Epoch 28/250\n","10/10 [==============================] - 0s 41ms/step - loss: 0.8138 - accuracy: 0.8268 - val_loss: 0.7206 - val_accuracy: 0.8888\n","Epoch 29/250\n","10/10 [==============================] - 0s 45ms/step - loss: 0.7768 - accuracy: 0.8276 - val_loss: 0.6927 - val_accuracy: 0.8866\n","Epoch 30/250\n","10/10 [==============================] - 0s 31ms/step - loss: 0.7513 - accuracy: 0.8342 - val_loss: 0.6680 - val_accuracy: 0.8888\n","Epoch 31/250\n","10/10 [==============================] - 0s 39ms/step - loss: 0.7268 - accuracy: 0.8338 - val_loss: 0.6471 - val_accuracy: 0.8898\n","Epoch 32/250\n","10/10 [==============================] - 0s 36ms/step - loss: 0.7092 - accuracy: 0.8378 - val_loss: 0.6287 - val_accuracy: 0.8926\n","Epoch 33/250\n","10/10 [==============================] - 0s 28ms/step - loss: 0.6922 - accuracy: 0.8414 - val_loss: 0.6133 - val_accuracy: 0.8932\n","Epoch 34/250\n","10/10 [==============================] - 0s 35ms/step - loss: 0.6792 - accuracy: 0.8382 - val_loss: 0.6001 - val_accuracy: 0.8914\n","Epoch 35/250\n","10/10 [==============================] - 0s 41ms/step - loss: 0.6647 - accuracy: 0.8440 - val_loss: 0.5879 - val_accuracy: 0.8924\n","Epoch 36/250\n","10/10 [==============================] - 0s 39ms/step - loss: 0.6512 - accuracy: 0.8474 - val_loss: 0.5779 - val_accuracy: 0.8868\n","Epoch 37/250\n","10/10 [==============================] - 0s 46ms/step - loss: 0.6474 - accuracy: 0.8388 - val_loss: 0.5690 - val_accuracy: 0.8936\n","Epoch 38/250\n","10/10 [==============================] - 0s 40ms/step - loss: 0.6358 - accuracy: 0.8474 - val_loss: 0.5615 - val_accuracy: 0.8944\n","Epoch 39/250\n","10/10 [==============================] - 0s 47ms/step - loss: 0.6273 - accuracy: 0.8508 - val_loss: 0.5546 - val_accuracy: 0.8900\n","Epoch 40/250\n","10/10 [==============================] - 0s 42ms/step - loss: 0.6187 - accuracy: 0.8484 - val_loss: 0.5473 - val_accuracy: 0.8952\n","Epoch 41/250\n","10/10 [==============================] - 0s 26ms/step - loss: 0.6212 - accuracy: 0.8422 - val_loss: 0.5414 - val_accuracy: 0.8958\n","Epoch 42/250\n","10/10 [==============================] - 0s 28ms/step - loss: 0.6158 - accuracy: 0.8476 - val_loss: 0.5368 - val_accuracy: 0.8884\n","Epoch 43/250\n","10/10 [==============================] - 0s 30ms/step - loss: 0.6024 - accuracy: 0.8568 - val_loss: 0.5317 - val_accuracy: 0.8954\n","Epoch 44/250\n","10/10 [==============================] - 0s 33ms/step - loss: 0.5990 - accuracy: 0.8462 - val_loss: 0.5264 - val_accuracy: 0.8936\n","Epoch 45/250\n","10/10 [==============================] - 0s 37ms/step - loss: 0.5925 - accuracy: 0.8574 - val_loss: 0.5223 - val_accuracy: 0.8984\n","Epoch 46/250\n","10/10 [==============================] - 0s 32ms/step - loss: 0.5890 - accuracy: 0.8546 - val_loss: 0.5192 - val_accuracy: 0.8914\n","Epoch 47/250\n","10/10 [==============================] - 0s 23ms/step - loss: 0.5822 - accuracy: 0.8542 - val_loss: 0.5145 - val_accuracy: 0.8950\n","Epoch 48/250\n","10/10 [==============================] - 0s 29ms/step - loss: 0.5746 - accuracy: 0.8598 - val_loss: 0.5105 - val_accuracy: 0.8992\n","Epoch 49/250\n","10/10 [==============================] - 0s 40ms/step - loss: 0.5761 - accuracy: 0.8538 - val_loss: 0.5069 - val_accuracy: 0.8968\n","Epoch 50/250\n","10/10 [==============================] - 0s 34ms/step - loss: 0.5723 - accuracy: 0.8602 - val_loss: 0.5043 - val_accuracy: 0.8978\n","Epoch 51/250\n","10/10 [==============================] - 0s 36ms/step - loss: 0.5749 - accuracy: 0.8564 - val_loss: 0.5016 - val_accuracy: 0.8968\n","Epoch 52/250\n","10/10 [==============================] - 0s 25ms/step - loss: 0.5634 - accuracy: 0.8612 - val_loss: 0.4985 - val_accuracy: 0.9006\n","Epoch 53/250\n","10/10 [==============================] - 0s 20ms/step - loss: 0.5625 - accuracy: 0.8600 - val_loss: 0.4955 - val_accuracy: 0.9000\n","Epoch 54/250\n","10/10 [==============================] - 0s 21ms/step - loss: 0.5651 - accuracy: 0.8570 - val_loss: 0.4928 - val_accuracy: 0.9002\n","Epoch 55/250\n","10/10 [==============================] - 0s 36ms/step - loss: 0.5526 - accuracy: 0.8656 - val_loss: 0.4901 - val_accuracy: 0.8992\n","Epoch 56/250\n","10/10 [==============================] - 0s 25ms/step - loss: 0.5614 - accuracy: 0.8628 - val_loss: 0.4883 - val_accuracy: 0.8972\n","Epoch 57/250\n","10/10 [==============================] - 0s 41ms/step - loss: 0.5529 - accuracy: 0.8626 - val_loss: 0.4855 - val_accuracy: 0.8958\n","Epoch 58/250\n","10/10 [==============================] - 0s 30ms/step - loss: 0.5428 - accuracy: 0.8722 - val_loss: 0.4827 - val_accuracy: 0.8988\n","Epoch 59/250\n","10/10 [==============================] - 0s 33ms/step - loss: 0.5614 - accuracy: 0.8576 - val_loss: 0.4813 - val_accuracy: 0.9004\n","Epoch 60/250\n","10/10 [==============================] - 0s 25ms/step - loss: 0.5492 - accuracy: 0.8690 - val_loss: 0.4787 - val_accuracy: 0.9004\n","Epoch 61/250\n","10/10 [==============================] - 0s 23ms/step - loss: 0.5448 - accuracy: 0.8666 - val_loss: 0.4767 - val_accuracy: 0.9028\n","Epoch 62/250\n","10/10 [==============================] - 0s 31ms/step - loss: 0.5455 - accuracy: 0.8666 - val_loss: 0.4752 - val_accuracy: 0.8988\n","Epoch 63/250\n","10/10 [==============================] - 0s 31ms/step - loss: 0.5379 - accuracy: 0.8672 - val_loss: 0.4727 - val_accuracy: 0.9024\n","Epoch 64/250\n","10/10 [==============================] - 0s 20ms/step - loss: 0.5436 - accuracy: 0.8690 - val_loss: 0.4707 - val_accuracy: 0.9026\n","Epoch 65/250\n","10/10 [==============================] - 0s 26ms/step - loss: 0.5354 - accuracy: 0.8760 - val_loss: 0.4689 - val_accuracy: 0.9010\n","Epoch 66/250\n","10/10 [==============================] - 0s 26ms/step - loss: 0.5381 - accuracy: 0.8698 - val_loss: 0.4670 - val_accuracy: 0.9042\n","Epoch 67/250\n","10/10 [==============================] - 0s 32ms/step - loss: 0.5341 - accuracy: 0.8688 - val_loss: 0.4642 - val_accuracy: 0.9052\n","Epoch 68/250\n","10/10 [==============================] - 0s 29ms/step - loss: 0.5258 - accuracy: 0.8746 - val_loss: 0.4632 - val_accuracy: 0.9028\n","Epoch 69/250\n","10/10 [==============================] - 0s 20ms/step - loss: 0.5282 - accuracy: 0.8772 - val_loss: 0.4605 - val_accuracy: 0.9036\n","Epoch 70/250\n","10/10 [==============================] - 0s 27ms/step - loss: 0.5213 - accuracy: 0.8732 - val_loss: 0.4592 - val_accuracy: 0.9054\n","Epoch 71/250\n","10/10 [==============================] - 0s 25ms/step - loss: 0.5257 - accuracy: 0.8742 - val_loss: 0.4578 - val_accuracy: 0.9042\n","Epoch 72/250\n","10/10 [==============================] - 0s 24ms/step - loss: 0.5205 - accuracy: 0.8736 - val_loss: 0.4555 - val_accuracy: 0.9056\n","Epoch 73/250\n","10/10 [==============================] - 0s 26ms/step - loss: 0.5157 - accuracy: 0.8760 - val_loss: 0.4534 - val_accuracy: 0.9060\n","Epoch 74/250\n","10/10 [==============================] - 0s 25ms/step - loss: 0.5150 - accuracy: 0.8786 - val_loss: 0.4513 - val_accuracy: 0.9064\n","Epoch 75/250\n","10/10 [==============================] - 0s 23ms/step - loss: 0.5094 - accuracy: 0.8800 - val_loss: 0.4503 - val_accuracy: 0.9098\n","Epoch 76/250\n","10/10 [==============================] - 0s 24ms/step - loss: 0.5142 - accuracy: 0.8770 - val_loss: 0.4487 - val_accuracy: 0.9082\n","Epoch 77/250\n","10/10 [==============================] - 0s 26ms/step - loss: 0.5188 - accuracy: 0.8760 - val_loss: 0.4480 - val_accuracy: 0.9088\n","Epoch 78/250\n","10/10 [==============================] - 0s 20ms/step - loss: 0.5148 - accuracy: 0.8734 - val_loss: 0.4450 - val_accuracy: 0.9110\n","Epoch 79/250\n","10/10 [==============================] - 0s 45ms/step - loss: 0.5130 - accuracy: 0.8734 - val_loss: 0.4437 - val_accuracy: 0.9124\n","Epoch 80/250\n","10/10 [==============================] - 0s 28ms/step - loss: 0.5101 - accuracy: 0.8756 - val_loss: 0.4426 - val_accuracy: 0.9120\n","Epoch 81/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.5062 - accuracy: 0.8834 - val_loss: 0.4413 - val_accuracy: 0.9102\n","Epoch 82/250\n","10/10 [==============================] - 0s 43ms/step - loss: 0.5071 - accuracy: 0.8822 - val_loss: 0.4399 - val_accuracy: 0.9098\n","Epoch 83/250\n","10/10 [==============================] - 0s 36ms/step - loss: 0.5060 - accuracy: 0.8804 - val_loss: 0.4386 - val_accuracy: 0.9184\n","Epoch 84/250\n","10/10 [==============================] - 0s 25ms/step - loss: 0.4996 - accuracy: 0.8782 - val_loss: 0.4366 - val_accuracy: 0.9184\n","Epoch 85/250\n","10/10 [==============================] - 0s 29ms/step - loss: 0.5002 - accuracy: 0.8810 - val_loss: 0.4354 - val_accuracy: 0.9134\n","Epoch 86/250\n","10/10 [==============================] - 0s 18ms/step - loss: 0.4941 - accuracy: 0.8886 - val_loss: 0.4346 - val_accuracy: 0.9130\n","Epoch 87/250\n","10/10 [==============================] - 0s 30ms/step - loss: 0.5013 - accuracy: 0.8826 - val_loss: 0.4319 - val_accuracy: 0.9152\n","Epoch 88/250\n","10/10 [==============================] - 0s 29ms/step - loss: 0.4973 - accuracy: 0.8818 - val_loss: 0.4321 - val_accuracy: 0.9162\n","Epoch 89/250\n","10/10 [==============================] - 0s 28ms/step - loss: 0.4919 - accuracy: 0.8870 - val_loss: 0.4302 - val_accuracy: 0.9104\n","Epoch 90/250\n","10/10 [==============================] - 0s 27ms/step - loss: 0.4907 - accuracy: 0.8880 - val_loss: 0.4294 - val_accuracy: 0.9116\n","Epoch 91/250\n","10/10 [==============================] - 0s 37ms/step - loss: 0.4906 - accuracy: 0.8820 - val_loss: 0.4264 - val_accuracy: 0.9154\n","Epoch 92/250\n","10/10 [==============================] - 0s 30ms/step - loss: 0.4948 - accuracy: 0.8838 - val_loss: 0.4258 - val_accuracy: 0.9196\n","Epoch 93/250\n","10/10 [==============================] - 0s 27ms/step - loss: 0.4865 - accuracy: 0.8848 - val_loss: 0.4248 - val_accuracy: 0.9200\n","Epoch 94/250\n","10/10 [==============================] - 0s 41ms/step - loss: 0.4905 - accuracy: 0.8862 - val_loss: 0.4243 - val_accuracy: 0.9224\n","Epoch 95/250\n","10/10 [==============================] - 0s 35ms/step - loss: 0.4884 - accuracy: 0.8886 - val_loss: 0.4234 - val_accuracy: 0.9218\n","Epoch 96/250\n","10/10 [==============================] - 0s 34ms/step - loss: 0.4820 - accuracy: 0.8924 - val_loss: 0.4206 - val_accuracy: 0.9216\n","Epoch 97/250\n","10/10 [==============================] - 0s 36ms/step - loss: 0.4796 - accuracy: 0.8918 - val_loss: 0.4201 - val_accuracy: 0.9220\n","Epoch 98/250\n","10/10 [==============================] - 0s 25ms/step - loss: 0.4842 - accuracy: 0.8856 - val_loss: 0.4189 - val_accuracy: 0.9242\n","Epoch 99/250\n","10/10 [==============================] - 0s 27ms/step - loss: 0.4848 - accuracy: 0.8888 - val_loss: 0.4185 - val_accuracy: 0.9232\n","Epoch 100/250\n","10/10 [==============================] - 0s 28ms/step - loss: 0.4775 - accuracy: 0.8942 - val_loss: 0.4174 - val_accuracy: 0.9218\n","Epoch 101/250\n","10/10 [==============================] - 0s 36ms/step - loss: 0.4744 - accuracy: 0.8904 - val_loss: 0.4152 - val_accuracy: 0.9192\n","Epoch 102/250\n","10/10 [==============================] - 0s 27ms/step - loss: 0.4807 - accuracy: 0.8900 - val_loss: 0.4150 - val_accuracy: 0.9224\n","Epoch 103/250\n","10/10 [==============================] - 0s 37ms/step - loss: 0.4793 - accuracy: 0.8882 - val_loss: 0.4132 - val_accuracy: 0.9244\n","Epoch 104/250\n","10/10 [==============================] - 0s 31ms/step - loss: 0.4786 - accuracy: 0.8910 - val_loss: 0.4121 - val_accuracy: 0.9244\n","Epoch 105/250\n","10/10 [==============================] - 0s 26ms/step - loss: 0.4720 - accuracy: 0.8920 - val_loss: 0.4114 - val_accuracy: 0.9224\n","Epoch 106/250\n","10/10 [==============================] - 0s 24ms/step - loss: 0.4748 - accuracy: 0.8910 - val_loss: 0.4105 - val_accuracy: 0.9228\n","Epoch 107/250\n","10/10 [==============================] - 0s 39ms/step - loss: 0.4690 - accuracy: 0.8948 - val_loss: 0.4092 - val_accuracy: 0.9236\n","Epoch 108/250\n","10/10 [==============================] - 0s 38ms/step - loss: 0.4724 - accuracy: 0.8920 - val_loss: 0.4076 - val_accuracy: 0.9236\n","Epoch 109/250\n","10/10 [==============================] - 0s 45ms/step - loss: 0.4693 - accuracy: 0.8958 - val_loss: 0.4068 - val_accuracy: 0.9264\n","Epoch 110/250\n","10/10 [==============================] - 0s 39ms/step - loss: 0.4729 - accuracy: 0.8894 - val_loss: 0.4066 - val_accuracy: 0.9244\n","Epoch 111/250\n","10/10 [==============================] - 0s 35ms/step - loss: 0.4724 - accuracy: 0.8944 - val_loss: 0.4057 - val_accuracy: 0.9260\n","Epoch 112/250\n","10/10 [==============================] - 1s 55ms/step - loss: 0.4711 - accuracy: 0.8904 - val_loss: 0.4049 - val_accuracy: 0.9264\n","Epoch 113/250\n","10/10 [==============================] - 0s 45ms/step - loss: 0.4643 - accuracy: 0.8954 - val_loss: 0.4030 - val_accuracy: 0.9276\n","Epoch 114/250\n","10/10 [==============================] - 0s 31ms/step - loss: 0.4640 - accuracy: 0.8926 - val_loss: 0.4025 - val_accuracy: 0.9220\n","Epoch 115/250\n","10/10 [==============================] - 0s 28ms/step - loss: 0.4608 - accuracy: 0.8954 - val_loss: 0.4015 - val_accuracy: 0.9242\n","Epoch 116/250\n","10/10 [==============================] - 0s 21ms/step - loss: 0.4594 - accuracy: 0.8964 - val_loss: 0.4009 - val_accuracy: 0.9260\n","Epoch 117/250\n","10/10 [==============================] - 0s 21ms/step - loss: 0.4591 - accuracy: 0.8928 - val_loss: 0.3993 - val_accuracy: 0.9246\n","Epoch 118/250\n","10/10 [==============================] - 0s 20ms/step - loss: 0.4599 - accuracy: 0.8924 - val_loss: 0.3979 - val_accuracy: 0.9288\n","Epoch 119/250\n","10/10 [==============================] - 0s 20ms/step - loss: 0.4588 - accuracy: 0.9000 - val_loss: 0.3972 - val_accuracy: 0.9268\n","Epoch 120/250\n","10/10 [==============================] - 0s 37ms/step - loss: 0.4542 - accuracy: 0.8974 - val_loss: 0.3964 - val_accuracy: 0.9262\n","Epoch 121/250\n","10/10 [==============================] - 0s 41ms/step - loss: 0.4536 - accuracy: 0.8942 - val_loss: 0.3966 - val_accuracy: 0.9262\n","Epoch 122/250\n","10/10 [==============================] - 0s 21ms/step - loss: 0.4593 - accuracy: 0.8942 - val_loss: 0.3950 - val_accuracy: 0.9248\n","Epoch 123/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.4533 - accuracy: 0.9006 - val_loss: 0.3939 - val_accuracy: 0.9278\n","Epoch 124/250\n","10/10 [==============================] - 0s 22ms/step - loss: 0.4551 - accuracy: 0.8984 - val_loss: 0.3925 - val_accuracy: 0.9282\n","Epoch 125/250\n","10/10 [==============================] - 0s 27ms/step - loss: 0.4577 - accuracy: 0.8926 - val_loss: 0.3915 - val_accuracy: 0.9286\n","Epoch 126/250\n","10/10 [==============================] - 0s 21ms/step - loss: 0.4542 - accuracy: 0.8960 - val_loss: 0.3912 - val_accuracy: 0.9284\n","Epoch 127/250\n","10/10 [==============================] - 0s 22ms/step - loss: 0.4545 - accuracy: 0.8944 - val_loss: 0.3905 - val_accuracy: 0.9284\n","Epoch 128/250\n","10/10 [==============================] - 0s 22ms/step - loss: 0.4520 - accuracy: 0.8930 - val_loss: 0.3898 - val_accuracy: 0.9300\n","Epoch 129/250\n","10/10 [==============================] - 0s 26ms/step - loss: 0.4525 - accuracy: 0.8954 - val_loss: 0.3887 - val_accuracy: 0.9256\n","Epoch 130/250\n","10/10 [==============================] - 0s 23ms/step - loss: 0.4538 - accuracy: 0.8990 - val_loss: 0.3892 - val_accuracy: 0.9314\n","Epoch 131/250\n","10/10 [==============================] - 0s 26ms/step - loss: 0.4458 - accuracy: 0.8980 - val_loss: 0.3876 - val_accuracy: 0.9282\n","Epoch 132/250\n","10/10 [==============================] - 0s 18ms/step - loss: 0.4477 - accuracy: 0.9046 - val_loss: 0.3859 - val_accuracy: 0.9284\n","Epoch 133/250\n","10/10 [==============================] - 0s 14ms/step - loss: 0.4517 - accuracy: 0.8922 - val_loss: 0.3852 - val_accuracy: 0.9296\n","Epoch 134/250\n","10/10 [==============================] - 0s 12ms/step - loss: 0.4426 - accuracy: 0.9032 - val_loss: 0.3852 - val_accuracy: 0.9292\n","Epoch 135/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4466 - accuracy: 0.9004 - val_loss: 0.3842 - val_accuracy: 0.9302\n","Epoch 136/250\n","10/10 [==============================] - 0s 11ms/step - loss: 0.4517 - accuracy: 0.8998 - val_loss: 0.3839 - val_accuracy: 0.9306\n","Epoch 137/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4445 - accuracy: 0.8990 - val_loss: 0.3820 - val_accuracy: 0.9296\n","Epoch 138/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4432 - accuracy: 0.9016 - val_loss: 0.3810 - val_accuracy: 0.9312\n","Epoch 139/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4382 - accuracy: 0.9030 - val_loss: 0.3800 - val_accuracy: 0.9330\n","Epoch 140/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4412 - accuracy: 0.8976 - val_loss: 0.3791 - val_accuracy: 0.9312\n","Epoch 141/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4328 - accuracy: 0.9078 - val_loss: 0.3781 - val_accuracy: 0.9322\n","Epoch 142/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4394 - accuracy: 0.9018 - val_loss: 0.3775 - val_accuracy: 0.9294\n","Epoch 143/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4372 - accuracy: 0.9052 - val_loss: 0.3782 - val_accuracy: 0.9302\n","Epoch 144/250\n","10/10 [==============================] - 0s 11ms/step - loss: 0.4432 - accuracy: 0.9000 - val_loss: 0.3771 - val_accuracy: 0.9302\n","Epoch 145/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4348 - accuracy: 0.9002 - val_loss: 0.3770 - val_accuracy: 0.9300\n","Epoch 146/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4387 - accuracy: 0.9000 - val_loss: 0.3753 - val_accuracy: 0.9312\n","Epoch 147/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4418 - accuracy: 0.9016 - val_loss: 0.3746 - val_accuracy: 0.9300\n","Epoch 148/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4372 - accuracy: 0.9012 - val_loss: 0.3737 - val_accuracy: 0.9334\n","Epoch 149/250\n","10/10 [==============================] - 0s 12ms/step - loss: 0.4389 - accuracy: 0.9040 - val_loss: 0.3737 - val_accuracy: 0.9318\n","Epoch 150/250\n","10/10 [==============================] - 0s 12ms/step - loss: 0.4291 - accuracy: 0.9112 - val_loss: 0.3721 - val_accuracy: 0.9324\n","Epoch 151/250\n","10/10 [==============================] - 0s 9ms/step - loss: 0.4276 - accuracy: 0.9042 - val_loss: 0.3732 - val_accuracy: 0.9328\n","Epoch 152/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4339 - accuracy: 0.8990 - val_loss: 0.3716 - val_accuracy: 0.9302\n","Epoch 153/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4279 - accuracy: 0.9028 - val_loss: 0.3707 - val_accuracy: 0.9336\n","Epoch 154/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4235 - accuracy: 0.9070 - val_loss: 0.3688 - val_accuracy: 0.9300\n","Epoch 155/250\n","10/10 [==============================] - 0s 14ms/step - loss: 0.4342 - accuracy: 0.9042 - val_loss: 0.3692 - val_accuracy: 0.9346\n","Epoch 156/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4309 - accuracy: 0.9056 - val_loss: 0.3685 - val_accuracy: 0.9312\n","Epoch 157/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4290 - accuracy: 0.9036 - val_loss: 0.3680 - val_accuracy: 0.9328\n","Epoch 158/250\n","10/10 [==============================] - 0s 11ms/step - loss: 0.4239 - accuracy: 0.9046 - val_loss: 0.3667 - val_accuracy: 0.9350\n","Epoch 159/250\n","10/10 [==============================] - 0s 13ms/step - loss: 0.4331 - accuracy: 0.9008 - val_loss: 0.3668 - val_accuracy: 0.9332\n","Epoch 160/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4210 - accuracy: 0.9086 - val_loss: 0.3651 - val_accuracy: 0.9350\n","Epoch 161/250\n","10/10 [==============================] - 0s 13ms/step - loss: 0.4238 - accuracy: 0.9052 - val_loss: 0.3645 - val_accuracy: 0.9326\n","Epoch 162/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4212 - accuracy: 0.9040 - val_loss: 0.3642 - val_accuracy: 0.9318\n","Epoch 163/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4258 - accuracy: 0.9010 - val_loss: 0.3644 - val_accuracy: 0.9358\n","Epoch 164/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4252 - accuracy: 0.9042 - val_loss: 0.3630 - val_accuracy: 0.9308\n","Epoch 165/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4180 - accuracy: 0.9070 - val_loss: 0.3627 - val_accuracy: 0.9330\n","Epoch 166/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4267 - accuracy: 0.9004 - val_loss: 0.3621 - val_accuracy: 0.9366\n","Epoch 167/250\n","10/10 [==============================] - 0s 9ms/step - loss: 0.4160 - accuracy: 0.9098 - val_loss: 0.3613 - val_accuracy: 0.9326\n","Epoch 168/250\n","10/10 [==============================] - 0s 12ms/step - loss: 0.4222 - accuracy: 0.9060 - val_loss: 0.3628 - val_accuracy: 0.9354\n","Epoch 169/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4190 - accuracy: 0.9038 - val_loss: 0.3600 - val_accuracy: 0.9342\n","Epoch 170/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4185 - accuracy: 0.9060 - val_loss: 0.3585 - val_accuracy: 0.9376\n","Epoch 171/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4199 - accuracy: 0.9044 - val_loss: 0.3587 - val_accuracy: 0.9326\n","Epoch 172/250\n","10/10 [==============================] - 0s 9ms/step - loss: 0.4142 - accuracy: 0.9070 - val_loss: 0.3569 - val_accuracy: 0.9338\n","Epoch 173/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4096 - accuracy: 0.9118 - val_loss: 0.3572 - val_accuracy: 0.9400\n","Epoch 174/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4229 - accuracy: 0.9004 - val_loss: 0.3563 - val_accuracy: 0.9348\n","Epoch 175/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4196 - accuracy: 0.9070 - val_loss: 0.3558 - val_accuracy: 0.9334\n","Epoch 176/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4167 - accuracy: 0.9086 - val_loss: 0.3553 - val_accuracy: 0.9410\n","Epoch 177/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4047 - accuracy: 0.9156 - val_loss: 0.3542 - val_accuracy: 0.9324\n","Epoch 178/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4178 - accuracy: 0.9082 - val_loss: 0.3543 - val_accuracy: 0.9394\n","Epoch 179/250\n","10/10 [==============================] - 0s 9ms/step - loss: 0.4110 - accuracy: 0.9054 - val_loss: 0.3540 - val_accuracy: 0.9328\n","Epoch 180/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.4119 - accuracy: 0.9120 - val_loss: 0.3528 - val_accuracy: 0.9364\n","Epoch 181/250\n","10/10 [==============================] - 0s 14ms/step - loss: 0.4087 - accuracy: 0.9082 - val_loss: 0.3519 - val_accuracy: 0.9326\n","Epoch 182/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.4127 - accuracy: 0.9052 - val_loss: 0.3511 - val_accuracy: 0.9406\n","Epoch 183/250\n","10/10 [==============================] - 0s 48ms/step - loss: 0.4115 - accuracy: 0.9084 - val_loss: 0.3509 - val_accuracy: 0.9332\n","Epoch 184/250\n","10/10 [==============================] - 1s 65ms/step - loss: 0.4078 - accuracy: 0.9064 - val_loss: 0.3498 - val_accuracy: 0.9356\n","Epoch 185/250\n","10/10 [==============================] - 0s 50ms/step - loss: 0.4164 - accuracy: 0.9016 - val_loss: 0.3502 - val_accuracy: 0.9390\n","Epoch 186/250\n","10/10 [==============================] - 0s 38ms/step - loss: 0.4155 - accuracy: 0.9060 - val_loss: 0.3504 - val_accuracy: 0.9368\n","Epoch 187/250\n","10/10 [==============================] - 0s 18ms/step - loss: 0.4099 - accuracy: 0.9094 - val_loss: 0.3485 - val_accuracy: 0.9378\n","Epoch 188/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.4046 - accuracy: 0.9090 - val_loss: 0.3476 - val_accuracy: 0.9394\n","Epoch 189/250\n","10/10 [==============================] - 0s 15ms/step - loss: 0.4076 - accuracy: 0.9064 - val_loss: 0.3473 - val_accuracy: 0.9384\n","Epoch 190/250\n","10/10 [==============================] - 0s 17ms/step - loss: 0.4079 - accuracy: 0.9134 - val_loss: 0.3472 - val_accuracy: 0.9390\n","Epoch 191/250\n","10/10 [==============================] - 0s 15ms/step - loss: 0.4112 - accuracy: 0.9080 - val_loss: 0.3480 - val_accuracy: 0.9388\n","Epoch 192/250\n","10/10 [==============================] - 0s 15ms/step - loss: 0.4073 - accuracy: 0.9106 - val_loss: 0.3477 - val_accuracy: 0.9394\n","Epoch 193/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.4037 - accuracy: 0.9124 - val_loss: 0.3456 - val_accuracy: 0.9340\n","Epoch 194/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.4025 - accuracy: 0.9130 - val_loss: 0.3458 - val_accuracy: 0.9428\n","Epoch 195/250\n","10/10 [==============================] - 0s 15ms/step - loss: 0.4095 - accuracy: 0.9060 - val_loss: 0.3457 - val_accuracy: 0.9360\n","Epoch 196/250\n","10/10 [==============================] - 0s 20ms/step - loss: 0.4067 - accuracy: 0.9034 - val_loss: 0.3450 - val_accuracy: 0.9364\n","Epoch 197/250\n","10/10 [==============================] - 0s 17ms/step - loss: 0.4002 - accuracy: 0.9136 - val_loss: 0.3462 - val_accuracy: 0.9402\n","Epoch 198/250\n","10/10 [==============================] - 0s 15ms/step - loss: 0.3989 - accuracy: 0.9144 - val_loss: 0.3420 - val_accuracy: 0.9420\n","Epoch 199/250\n","10/10 [==============================] - 0s 15ms/step - loss: 0.4095 - accuracy: 0.9092 - val_loss: 0.3433 - val_accuracy: 0.9380\n","Epoch 200/250\n","10/10 [==============================] - 0s 15ms/step - loss: 0.4006 - accuracy: 0.9114 - val_loss: 0.3417 - val_accuracy: 0.9414\n","Epoch 201/250\n","10/10 [==============================] - 0s 18ms/step - loss: 0.3995 - accuracy: 0.9128 - val_loss: 0.3403 - val_accuracy: 0.9396\n","Epoch 202/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.4020 - accuracy: 0.9078 - val_loss: 0.3418 - val_accuracy: 0.9386\n","Epoch 203/250\n","10/10 [==============================] - 0s 15ms/step - loss: 0.4001 - accuracy: 0.9112 - val_loss: 0.3409 - val_accuracy: 0.9348\n","Epoch 204/250\n","10/10 [==============================] - 0s 15ms/step - loss: 0.3997 - accuracy: 0.9086 - val_loss: 0.3406 - val_accuracy: 0.9420\n","Epoch 205/250\n","10/10 [==============================] - 0s 18ms/step - loss: 0.3966 - accuracy: 0.9114 - val_loss: 0.3390 - val_accuracy: 0.9422\n","Epoch 206/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.3960 - accuracy: 0.9128 - val_loss: 0.3394 - val_accuracy: 0.9404\n","Epoch 207/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.4015 - accuracy: 0.9134 - val_loss: 0.3389 - val_accuracy: 0.9388\n","Epoch 208/250\n","10/10 [==============================] - 0s 16ms/step - loss: 0.3947 - accuracy: 0.9114 - val_loss: 0.3396 - val_accuracy: 0.9366\n","Epoch 209/250\n","10/10 [==============================] - 0s 22ms/step - loss: 0.3937 - accuracy: 0.9124 - val_loss: 0.3391 - val_accuracy: 0.9406\n","Epoch 210/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.3970 - accuracy: 0.9164 - val_loss: 0.3370 - val_accuracy: 0.9398\n","Epoch 211/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.3985 - accuracy: 0.9078 - val_loss: 0.3370 - val_accuracy: 0.9386\n","Epoch 212/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.3916 - accuracy: 0.9152 - val_loss: 0.3383 - val_accuracy: 0.9404\n","Epoch 213/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.3977 - accuracy: 0.9102 - val_loss: 0.3356 - val_accuracy: 0.9408\n","Epoch 214/250\n","10/10 [==============================] - 0s 18ms/step - loss: 0.3909 - accuracy: 0.9150 - val_loss: 0.3357 - val_accuracy: 0.9382\n","Epoch 215/250\n","10/10 [==============================] - 0s 15ms/step - loss: 0.3920 - accuracy: 0.9146 - val_loss: 0.3340 - val_accuracy: 0.9442\n","Epoch 216/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.3913 - accuracy: 0.9158 - val_loss: 0.3337 - val_accuracy: 0.9408\n","Epoch 217/250\n","10/10 [==============================] - 0s 20ms/step - loss: 0.3921 - accuracy: 0.9116 - val_loss: 0.3338 - val_accuracy: 0.9408\n","Epoch 218/250\n","10/10 [==============================] - 0s 20ms/step - loss: 0.3952 - accuracy: 0.9118 - val_loss: 0.3349 - val_accuracy: 0.9406\n","Epoch 219/250\n","10/10 [==============================] - 0s 15ms/step - loss: 0.4012 - accuracy: 0.9092 - val_loss: 0.3330 - val_accuracy: 0.9404\n","Epoch 220/250\n","10/10 [==============================] - 0s 21ms/step - loss: 0.3890 - accuracy: 0.9178 - val_loss: 0.3337 - val_accuracy: 0.9424\n","Epoch 221/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.3954 - accuracy: 0.9172 - val_loss: 0.3323 - val_accuracy: 0.9414\n","Epoch 222/250\n","10/10 [==============================] - 0s 19ms/step - loss: 0.3903 - accuracy: 0.9114 - val_loss: 0.3339 - val_accuracy: 0.9388\n","Epoch 223/250\n","10/10 [==============================] - 0s 11ms/step - loss: 0.3901 - accuracy: 0.9108 - val_loss: 0.3318 - val_accuracy: 0.9434\n","Epoch 224/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3879 - accuracy: 0.9142 - val_loss: 0.3299 - val_accuracy: 0.9416\n","Epoch 225/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3849 - accuracy: 0.9134 - val_loss: 0.3293 - val_accuracy: 0.9442\n","Epoch 226/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3948 - accuracy: 0.9070 - val_loss: 0.3308 - val_accuracy: 0.9410\n","Epoch 227/250\n","10/10 [==============================] - 0s 12ms/step - loss: 0.3831 - accuracy: 0.9160 - val_loss: 0.3294 - val_accuracy: 0.9394\n","Epoch 228/250\n","10/10 [==============================] - 0s 12ms/step - loss: 0.3888 - accuracy: 0.9126 - val_loss: 0.3315 - val_accuracy: 0.9422\n","Epoch 229/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3944 - accuracy: 0.9104 - val_loss: 0.3282 - val_accuracy: 0.9408\n","Epoch 230/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3896 - accuracy: 0.9116 - val_loss: 0.3294 - val_accuracy: 0.9428\n","Epoch 231/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3914 - accuracy: 0.9132 - val_loss: 0.3282 - val_accuracy: 0.9416\n","Epoch 232/250\n","10/10 [==============================] - 0s 12ms/step - loss: 0.3864 - accuracy: 0.9112 - val_loss: 0.3273 - val_accuracy: 0.9456\n","Epoch 233/250\n","10/10 [==============================] - 0s 12ms/step - loss: 0.3868 - accuracy: 0.9152 - val_loss: 0.3267 - val_accuracy: 0.9454\n","Epoch 234/250\n","10/10 [==============================] - 0s 11ms/step - loss: 0.3829 - accuracy: 0.9122 - val_loss: 0.3260 - val_accuracy: 0.9426\n","Epoch 235/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3865 - accuracy: 0.9140 - val_loss: 0.3256 - val_accuracy: 0.9430\n","Epoch 236/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3838 - accuracy: 0.9184 - val_loss: 0.3261 - val_accuracy: 0.9418\n","Epoch 237/250\n","10/10 [==============================] - 0s 13ms/step - loss: 0.3829 - accuracy: 0.9188 - val_loss: 0.3274 - val_accuracy: 0.9402\n","Epoch 238/250\n","10/10 [==============================] - 0s 14ms/step - loss: 0.3800 - accuracy: 0.9172 - val_loss: 0.3251 - val_accuracy: 0.9440\n","Epoch 239/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3837 - accuracy: 0.9148 - val_loss: 0.3232 - val_accuracy: 0.9424\n","Epoch 240/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3797 - accuracy: 0.9142 - val_loss: 0.3245 - val_accuracy: 0.9436\n","Epoch 241/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3815 - accuracy: 0.9154 - val_loss: 0.3238 - val_accuracy: 0.9442\n","Epoch 242/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3819 - accuracy: 0.9156 - val_loss: 0.3231 - val_accuracy: 0.9446\n","Epoch 243/250\n","10/10 [==============================] - 0s 12ms/step - loss: 0.3786 - accuracy: 0.9196 - val_loss: 0.3235 - val_accuracy: 0.9450\n","Epoch 244/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3802 - accuracy: 0.9156 - val_loss: 0.3223 - val_accuracy: 0.9424\n","Epoch 245/250\n","10/10 [==============================] - 0s 14ms/step - loss: 0.3770 - accuracy: 0.9244 - val_loss: 0.3228 - val_accuracy: 0.9424\n","Epoch 246/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3836 - accuracy: 0.9168 - val_loss: 0.3214 - val_accuracy: 0.9440\n","Epoch 247/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3808 - accuracy: 0.9170 - val_loss: 0.3208 - val_accuracy: 0.9452\n","Epoch 248/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3772 - accuracy: 0.9132 - val_loss: 0.3209 - val_accuracy: 0.9424\n","Epoch 249/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3753 - accuracy: 0.9188 - val_loss: 0.3195 - val_accuracy: 0.9436\n","Epoch 250/250\n","10/10 [==============================] - 0s 10ms/step - loss: 0.3769 - accuracy: 0.9174 - val_loss: 0.3208 - val_accuracy: 0.9466\n"]}],"source":["# Separate target variable from features\n","X = df.drop('category', axis=1)\n","y = df['category']\n","\n","# Normalize the data\n","scaler = StandardScaler()\n","X = scaler.fit_transform(X)\n","\n","from tensorflow.keras.regularizers import l2\n","from tensorflow.keras import regularizers\n","\n","  # Split dataset into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\n","# define the MLP architecture\n","num_classes=len(unique_categories)\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],), kernel_regularizer=regularizers.l2(0.1)),\n","    tf.keras.layers.Dropout(0.5),\n","    tf.keras.layers.Dense(32, activation='relu', kernel_regularizer=regularizers.l2(0.1)),\n","    tf.keras.layers.Dropout(0.5),\n","    tf.keras.layers.Dense(num_classes, activation='softmax')\n","])\n","\n","\n","# compile the model with binary crossentropy loss and Adam optimizer\n","model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# load your data\n","X_train = X_train.astype('float32')\n","y_train = y_train.astype('float32')\n","X_val = X_test.astype('float32')\n","y_val = y_test.astype('float32')\n","'''\n","X_train = X_train.astype('float32')k\n","y_train = y_train.astype('float32')\n","X_val = X_test.astype('float32')\n","y_val = y_test.astype('float32')\n","'''\n","# train the model\n","history = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=250, batch_size=512)\n","\n","\n"]},{"cell_type":"code","source":["# evaluate the model on test data\n","X_test = X_test.astype('float32')\n","y_test = y_test.astype('float32')\n","test_loss, test_acc = model.evaluate(X_test, y_test)\n","print('Test accuracy:', test_acc)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w51-vr8jGpU9","executionInfo":{"status":"ok","timestamp":1682321831117,"user_tz":-330,"elapsed":1138,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"}},"outputId":"a2cbf6b1-f244-4daa-e01e-3a1beec8fa97"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["157/157 [==============================] - 0s 3ms/step - loss: 0.3208 - accuracy: 0.9466\n","Test accuracy: 0.9466000199317932\n"]}]},{"cell_type":"code","source":["plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.title('Model Accuracy')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Epoch')\n","plt.legend(['Train', 'Test'], loc='upper left')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"XbyLfd9rGqh3","executionInfo":{"status":"ok","timestamp":1682321839236,"user_tz":-330,"elapsed":1821,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"}},"outputId":"7df8a9d6-a898-4c85-be31-82515e4e094c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('Model Loss')\n","plt.ylabel('Loss')\n","plt.xlabel('Epoch')\n","plt.legend(['Train', 'Test'], loc='upper left')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"dHseDH0OGvJB","executionInfo":{"status":"ok","timestamp":1682321851054,"user_tz":-330,"elapsed":529,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"}},"outputId":"270ff998-4181-4e39-fb51-dc065c4e01fe"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAjIAAAHHCAYAAACle7JuAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABLp0lEQVR4nO3deXxU9b3/8dc5s2ZPCGSTVUU2heICorbVKwqIuNeN3ou2lWvFWtfbentFsbWorZaftWK1LXjvdV+wXutSwa1aVBR3EWUPSwgQsmf27++PmYwJO8ms4f18PM4jmXPOzHzmEJO33+1YxhiDiIiISBay012AiIiISFcpyIiIiEjWUpARERGRrKUgIyIiIllLQUZERESyloKMiIiIZC0FGREREclaCjIiIiKStRRkREREJGspyIhIRrAsi1tuuWW/n7dmzRosy2L+/PkJr0lEMp+CjIjEzZ8/H8uysCyLt956a6fjxhj69euHZVmcfvrpaaiw615//XUsy+Kpp55KdykikkAKMiKyE6/XyyOPPLLT/jfeeIP169fj8XjSUJWIyM4UZERkJ6eddhpPPvkkoVCo0/5HHnmEo446ioqKijRVJiLSmYKMiOzkoosuYtu2bbzyyivxfYFAgKeeeoqLL754l89paWnhuuuuo1+/fng8HoYMGcJvf/tbjDGdzvP7/VxzzTX06dOHgoICzjjjDNavX7/L19ywYQM/+MEPKC8vx+PxMGLECP7yl78k7oPuwqpVq/je975Hr169yM3N5dhjj+Vvf/vbTuf9/ve/Z8SIEeTm5lJSUsLRRx/dqRWrqamJq6++moEDB+LxeCgrK+OUU05h6dKlSa1f5ECjICMiOxk4cCDjxo3j0Ucfje978cUXaWho4MILL9zpfGMMZ5xxBr/73e+YOHEid999N0OGDOGGG27g2muv7XTuj370I+bMmcOpp57K7bffjsvlYvLkyTu95ubNmzn22GNZuHAhV155Jf/v//0/Dj30UH74wx8yZ86chH/m9vc87rjjePnll7niiiu47bbb8Pl8nHHGGSxYsCB+3oMPPshVV13F8OHDmTNnDrNmzeJb3/oW7777bvycyy+/nLlz53Luuedy3333cf3115OTk8OyZcuSUrvIAcuIiMTMmzfPAGbJkiXm3nvvNQUFBaa1tdUYY8z3vvc9c9JJJxljjBkwYICZ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27ZNTU1N/Jy5c+eawsJC4/f7U/sBssiO19oYY7773e+an/70p7t9TiqutVpk9lMgEOCDDz5g/Pjx8X22bTN+/HgWL16cxsqy39dff01VVRUHH3wwU6dOZd26dQB88MEHBIPBTtd86NCh9O/fX9e8m1avXk1NTU2na1tUVMTYsWPj13bx4sUUFxdz9NFHx88ZP348tm3z7rvvprzmbPb6669TVlbGkCFD+PGPf8y2bdvix3Sdu6ahoQGAXr16Afv2+2Lx4sUcccQRlJeXx8+ZMGECjY2NfP755ymsPrvseK3bPfzww/Tu3ZvDDz+cG2+8kdbW1vixVFzrHn/TyETbunUr4XC40z8KQHl5OV9++WWaqsp+Y8eOZf78+QwZMoRNmzYxa9Ysvv3tb/PZZ59RU1OD2+2muLi403PKy8upqalJT8E9RPv129XPc/uxmpoaysrKOh13Op306tVL138/TJw4kXPOOYdBgwaxcuVK/vM//5NJkyaxePFiHA6HrnMXRCIRrr76ao4//ngOP/xwgH36fVFTU7PLn/n2Y7KzXV1rgIsvvpgBAwZQVVXFJ598ws9+9jOWL1/OM888A6TmWivISEaYNGlS/PuRI0cyduxYBgwYwBNPPEFOTk4aKxNJjAsvvDD+/RFHHMHIkSM55JBDeP311zn55JPTWFn2mjFjBp999lmn8XSSHLu71h3HcB1xxBFUVlZy8skns3LlSg455JCU1Kaupf3Uu3dvHA7HTiPgN2/eTEVFRZqq6nmKi4s57LDDWLFiBRUVFQQCAerr6zudo2vefe3Xb08/zxUVFTsNZA+FQtTV1en6d8PBBx9M7969WbFiBaDrvL+uvPJKnn/+eV577TX69u0b378vvy8qKip2+TPffkw629213pWxY8cCdPq5Tva1VpDZT263m6OOOopFixbF90UiERYtWsS4cePSWFnP0tzczMqVK6msrOSoo47C5XJ1uubLly9n3bp1uubdNGjQICoqKjpd28bGRt599934tR03bhz19fV88MEH8XNeffVVIpFI/JeW7L/169ezbds2KisrAV3nfWWM4corr2TBggW8+uqrDBo0qNPxffl9MW7cOD799NNOwfGVV16hsLCQ4cOHp+aDZIG9Xetd+eijjwA6/Vwn/VonZMjwAeaxxx4zHo/HzJ8/33zxxRdm+vTppri4uNOobNk/1113nXn99dfN6tWrzdtvv23Gjx9vevfubWpra40xxlx++eWmf//+5tVXXzXvv/++GTdunBk3blyaq84OTU1N5sMPPzQffvihAczdd99tPvzwQ7N27VpjjDG33367KS4uNn/961/NJ598Ys4880wzaNAg09bWFn+NiRMnmtGjR5t3333XvPXWW2bw4MHmoosuStdHykh7us5NTU3m+uuvN4sXLzarV682CxcuNEceeaQZPHiw8fl88dfQdd67H//4x6aoqMi8/vrrZtOmTfGttbU1fs7efl+EQiFz+OGHm1NPPdV89NFH5qWXXjJ9+vQxN954Yzo+Usba27VesWKFufXWW837779vVq9ebf7617+agw8+2HznO9+Jv0YqrrWCTBf9/ve/N/379zdut9uMGTPGvPPOO+kuKatdcMEFprKy0rjdbnPQQQeZCy64wKxYsSJ+vK2tzVxxxRWmpKTE5ObmmrPPPtts2rQpjRVnj9dee80AO23Tpk0zxkSnYN90002mvLzceDwec/LJJ5vly5d3eo1t27aZiy66yOTn55vCwkJz6aWXmqampjR8msy1p+vc2tpqTj31VNOnTx/jcrnMgAEDzGWXXbbT//zoOu/drq4xYObNmxc/Z19+X6xZs8ZMmjTJ5OTkmN69e5vrrrvOBIPBFH+azLa3a71u3Trzne98x/Tq1ct4PB5z6KGHmhtuuME0NDR0ep1kX2srVqyIiIhI1tEYGREREclaCjIiIiKStRRkREREJGspyIiIiEjWUpARERGRrKUgIyIiIllLQUZERESyloKMiBxwLMvi2WefTXcZIpIACjIiklKXXHIJlmXttE2cODHdpYlIFnKmuwAROfBMnDiRefPmddrn8XjSVI2IZDO1yIhIynk8HioqKjptJSUlQLTbZ+7cuUyaNImcnBwOPvhgnnrqqU7P//TTT/mXf/kXcnJyKC0tZfr06TQ3N3c65y9/+QsjRozA4/FQWVnJlVde2en41q1bOfvss8nNzWXw4ME899xzyf3QIpIUCjIiknFuuukmzj33XD7++GOmTp3KhRdeyLJlywBoaWlhwoQJlJSUsGTJEp588kkWLlzYKajMnTuXGTNmMH36dD799FOee+45Dj300E7vMWvWLM4//3w++eQTTjvtNKZOnUpdXV1KP6eIJEDCbj8pIrIPpk2bZhwOh8nLy+u03XbbbcaY6B13L7/88k7PGTt2rPnxj39sjDHmgQceMCUlJaa5uTl+/G9/+5uxbTt+N+mqqirzi1/8Yrc1AOa//uu/4o+bm5sNYF588cWEfU4RSQ2NkRGRlDvppJOYO3dup329evWKfz9u3LhOx8aNG8dHH30EwLJlyxg1ahR5eXnx48cffzyRSITly5djWRYbN27k5JNP3mMNI0eOjH+fl5dHYWEhtbW1Xf1IIpImCjIiknJ5eXk7dfUkSk5Ozj6d53K5Oj22LItIJJKMkkQkiTRGRkQyzjvvvLPT42HDhgEwbNgwPv74Y1paWuLH3377bWzbZsiQIRQUFDBw4EAWLVqU0ppFJD3UIiMiKef3+6mpqem0z+l00rt3bwCefPJJjj76aE444QQefvhh3nvvPf785z8DMHXqVG6++WamTZvGLbfcwpYtW/jJT37Cv/7rv1JeXg7ALbfcwuWXX05ZWRmTJk2iqamJt99+m5/85Cep/aAiknQKMiKSci+99BKVlZWd9g0ZMoQvv/wSiM4oeuyxx7jiiiuorKzk0UcfZfjw4QDk5uby8ssv89Of/pRjjjmG3Nxczj33XO6+++74a02bNg2fz8fvfvc7rr/+enr37s15552Xug8oIiljGWNMuosQEWlnWRYLFizgrLPOSncpIpIFNEZGREREspaCjIiIiGQtjZERkYyi3m4R2R9qkREREZGspSAjIiIiWUtBRkRERLKWgoyIiIhkLQUZERERyVoKMiIiIpK1FGREREQkaynIiIiISNZSkBEREZGs9f8BqRtLLEW1upMAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","\n","# make predictions on test data\n","y_pred = model.predict(X_test)\n","y_pred = np.argmax(y_pred, axis=1)\n","\n","# print classification report\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kPzzr_lL78iD","executionInfo":{"status":"ok","timestamp":1682321848729,"user_tz":-330,"elapsed":689,"user":{"displayName":"Arvindh Sai k","userId":"17596039655648336360"}},"outputId":"e3ae996a-de3b-4a8f-c878-99d76d371d21"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["157/157 [==============================] - 1s 2ms/step\n","              precision    recall  f1-score   support\n","\n","         0.0       0.94      0.96      0.95      2654\n","         1.0       0.95      0.93      0.94      2231\n","         2.0       0.00      0.00      0.00         1\n","         3.0       1.00      0.92      0.96       114\n","\n","    accuracy                           0.95      5000\n","   macro avg       0.72      0.70      0.71      5000\n","weighted avg       0.95      0.95      0.95      5000\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.9/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]}],"metadata":{"accelerator":"TPU","colab":{"provenance":[{"file_id":"1GeDDsKi_F4yvsD7pl-tvFRyHhBtRJm8z","timestamp":1682181023404}]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}